@use 'maps' as *;
@use 'breakpoints' as *;

/* spaces */

@each $key, $value in $spaces {

    @if $key == base {

        /* gap for grids & layouts */

        .gap {
            grid-gap: $value;
        }

        .gap-y {
            grid-row-gap: $value;
        }

        .gap-x  {
            grid-column-gap: $value;
        }

        /* paddings */

        .padding {
            padding: $value;
        }

        .padding-y {
            padding-top: $value;
            padding-bottom: $value;
        }

        .padding-x {
            padding-left: $value;
            padding-right: $value;
        }

        .padding-t {
            padding-top: $value;
        }

        .padding-b {
            padding-bottom: $value;
        }

        .padding-l {
            padding-left: $value;
        }

        .padding-r {
            padding-right: $value;
        }

        /* margins */

        .margin {
            margin: $value;
        }

        .margin-y {
            margin-top: $value;
            margin-bottom: $value;
        }

        .margin-x {
            margin-left: $value;
            margin-right: $value;
        }

        .margin-t {
            margin-top: $value;
        }

        .margin-b {
            margin-bottom: $value;
        }

        .margin-l {
            margin-left: $value;
        }

        .margin-r {
            margin-right: $value;
        }

    }

    /* gaps */

    .gap-#{$key} {
        grid-gap: $value;
    }

    .gap-y-#{$key} {
        grid-row-gap: $value;
    }

    .gap-x-#{$key} {
        grid-column-gap: $value;
    }

    /* paddings */

    .padding-#{$key} {
        padding: $value;
    }

    .padding-y-#{$key} {
        padding-top: $value;
        padding-bottom: $value;
    }

    .padding-x-#{$key} {
        padding-left: $value;
        padding-right: $value;
    }

    .padding-top-#{$key} {
        padding-top: $value;
    }

    .padding-bottom-#{$key} {
        padding-bottom: $value;
    }

    .padding-left-#{$key} {
        padding-left: $value;
    }

    .padding-right-#{$key} {
        padding-right: $value;
    }

    /* margins */

    .margin-#{$key} {
        margin: $value;
    }

    .margin-y-#{$key} {
        margin-top: $value;
        margin-bottom: $value;
    }

    .margin-x-#{$key} {
        margin-left: $value;
        margin-right: $value;
    }

    .margin-top-#{$key} {
        margin-top: $value;
    }

    .margin-bottom-#{$key} {
        margin-bottom: $value;
    }

    .margin-left-#{$key} {
        margin-left: $value;
    }

    .margin-right-#{$key} {
        margin-right: $value;
    }

}

@each $breakpoint, $value in $breakpoints {
    @include breakpoint(#{$breakpoint}) {
        @each $key, $value in $spaces {

            @if $key == base {

                /* gap for grids & layouts */

                .gap\@#{$breakpoint} {
                    grid-gap: $value;
                }

                .gap-y\@#{$breakpoint} {
                    grid-row-gap: $value;
                }

                .gap-x\@#{$breakpoint}  {
                    grid-column-gap: $value;
                }

                /* paddings */

                .padding\@#{$breakpoint} {
                    padding: $value;
                }

                .padding-y\@#{$breakpoint} {
                    padding-top: $value;
                    padding-bottom: $value;
                }

                .padding-x\@#{$breakpoint} {
                    padding-left: $value;
                    padding-right: $value;
                }

                .padding-t\@#{$breakpoint} {
                    padding-top: $value;
                }

                .padding-b\@#{$breakpoint} {
                    padding-bottom: $value;
                }

                .padding-l\@#{$breakpoint} {
                    padding-left: $value;
                }

                .padding-r\@#{$breakpoint} {
                    padding-right: $value;
                }

                /* margins */

                .m\@#{$breakpoint} {
                    margin: $value;
                }

                .margin-y\@#{$breakpoint} {
                    margin-top: $value;
                    margin-bottom: $value;
                }

                .margin-x\@#{$breakpoint} {
                    margin-left: $value;
                    margin-right: $value;
                }

                .margin-t\@#{$breakpoint} {
                    margin-top: $value;
                }

                .margin-b\@#{$breakpoint} {
                    margin-bottom: $value;
                }

                .margin-l\@#{$breakpoint} {
                    margin-left: $value;
                }

                .margin-r\@#{$breakpoint} {
                    margin-right: $value;
                }

            }

            /* gaps */

            .gap-#{$key}\@#{$breakpoint} {
                grid-gap: $value;
            }

            .gap-y-#{$key}\@#{$breakpoint} {
                grid-row-gap: $value;
            }

            .gap-x-#{$key}\@#{$breakpoint} {
                grid-column-gap: $value;
            }

            /* paddings */

            .padding-#{$key}\@#{$breakpoint} {
                padding: $value;
            }

            .padding-y-#{$key}\@#{$breakpoint} {
                padding-top: $value;
                padding-bottom: $value;
            }

            .padding-x-#{$key}\@#{$breakpoint} {
                padding-left: $value;
                padding-right: $value;
            }

            .padding-top-#{$key}\@#{$breakpoint} {
                padding-top: $value;
            }

            .padding-bottom-#{$key}\@#{$breakpoint} {
                padding-bottom: $value;
            }

            .padding-left-#{$key}\@#{$breakpoint} {
                padding-left: $value;
            }

            .padding-right-#{$key}\@#{$breakpoint} {
                padding-right: $value;
            }

            /* margins */

            .margin-#{$key}\@#{$breakpoint} {
                margin: $value;
            }

            .margin-y-#{$key}\@#{$breakpoint} {
                margin-top: $value;
                margin-bottom: $value;
            }

            .margin-x-#{$key}\@#{$breakpoint} {
                margin-left: $value;
                margin-right: $value;
            }

            .margin-top-#{$key}\@#{$breakpoint} {
                margin-top: $value;
            }

            .margin-bottom-#{$key}\@#{$breakpoint} {
                margin-bottom: $value;
            }

            .margin-left-#{$key}\@#{$breakpoint} {
                margin-left: $value;
            }

            .margin-right-#{$key}\@#{$breakpoint} {
                margin-right: $value;
            }

        }
    }
}


/* flex */
.flex {
    display: flex;
}

.inline-flex {
    display: inline-flex;
}

.align-center {
    align-items: center;
}

.align-start {
    align-items: flex-start;
}

.align-end {
    align-items: flex-end;
}

.align-stretch {
    align-items: stretch;
}

.justify-center {
    justify-content: center;
}

.justify-start {
    justify-content: flex-start;
}

.justify-end {
    justify-content: flex-end;
}

.justify-between {
    justify-content: space-between;
}

.justify-around {
    justify-content: space-around;
}

.justify-evenly {
    justify-content: space-evenly;
}

.justify-stretch {
    justify-content: stretch;
}

.wrap {
    flex-wrap: wrap;
}

.nowrap {
    flex-wrap: nowrap;
}

.direction-column {
    flex-direction: column;
}

.direction-column-reverse {
    flex-direction: column-reverse;
}

.direction-row-reverse {
    flex-direction: row-reverse;
}

/* display */
.block {
    display: block;
}

.inline {
    display: inline;

    &-block {
        display: inline-block;
    }
}

/* display & visibility */

.none {
    display: none;
}

.hidden {
    visibility: hidden;
}

@for $i from 1 through 10 {
    .order-#{$i} {
        order: $i
    }
}

/* text */
.text-center {
    text-align: center;
}

.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

@for $i from 1 through 9 {
    .font-weight-#{$i} {
        font-weight: #{$i}00;
    }
}

.italic {
    font-style: italic;
}

.underline {
    text-decoration: underline;
}

.capitalize {
    text-transform: capitalize;
}

.uppercase {
    text-transform: uppercase;
}


/* measures */

@each $key, $value in $measures {

    @if $key == default {
        .measure {
            max-width: 100%;
        }
    }

    .measure-#{$key} {
        max-width: $value;
    }

}


/*position*/

.relative {
    position: relative;
}

.fixed {
    position: fixed;
}

.absolute {
    position: absolute;
}

@for $i from 1 through 10 {
    .z-index-#{$i} {
        z-index: $i;
    }
}

/* opacity */

@for $i from 1 through 9 {
    .opacity-#{$i} {
        opacity: calc($i / 10);
    }
}

/* object-fit */

.object-fill {
    object-fit: fill;
}

.object-contain {
    object-fit: contain;
}

.object-cover {
    object-fit: cover;
}

.object-none {
    object-fit: none;
}

.object-scale {
    object-fit: scale-down;
}

/*background-size*/
.bg-cover {
    background-size: cover;
}

.bg-contain {
    background-size: contain;
}

/*radius*/

@each $key, $value in $radius {

    @each $rp in $radius-positions {

        @if $rp == all {

            @if $key == full {

                .radius-#{$key} {
                    border-radius: $value * 1%;
                }

            } @else if $key != full {

                .radius-#{$key} {
                    border-radius: $value + $units;
                }

            }
        } @else if $rp != all {

        @if $key == full {

            .radius-#{$rp}-#{$key} {
                border-#{$rp}-radius: $value * 1%;
            }

        } @else if $key != full {

            .radius-#{$rp}-#{$key} {
                border-#{$rp}-radius: $value + $units;
            }

        }
    }

    }

}

/* border default */

// .border, .border-top, .border-left, .border-bottom, .border-right
[class*="border"] {
    border: 1px solid #000000;
}

@each $border in $border-positions {

    /* border style */

    @each $bs in $border-styles {
        .#{$border}-#{$bs} {
            #{$border}-style: $bs;
        }
    }

    /* border width */

    @each $key, $value in $borders {
        .#{$border}-#{$key} {
            #{$border}-width: $value + $units;
        }
    }

    /* border-colors*/

    @each $key, $value in $colors {
        .#{$border}-#{"" + $key} {
            #{$border}-color: $value;
        }
    }

}

/*background, border & fonts colors*/

@each $key, $value in $colors {
    .bg-#{"" + $key} {
        background-color: $value;
    }

    .color-#{"" + $key} {
        color: $value;
    }

}


@each $breakpoint, $value in $breakpoints {
    @include breakpoint(#{$breakpoint}) {

        /* flex */
        .flex\@#{$breakpoint} {
            display: flex;
        }

        .inline-flex\@#{$breakpoint} {
            display: inline-flex;
        }

        .align-center\@#{$breakpoint} {
            align-items: center;
        }

        .align-start\@#{$breakpoint} {
            align-items: flex-start;
        }

        .align-end\@#{$breakpoint} {
            align-items: flex-end;
        }

        .align-stretch\@#{$breakpoint} {
            align-items: stretch;
        }

        .justify-center\@#{$breakpoint} {
            justify-content: center;
        }

        .justify-start\@#{$breakpoint} {
            justify-content: flex-start;
        }

        .justify-end\@#{$breakpoint} {
            justify-content: flex-end;
        }

        .justify-between\@#{$breakpoint} {
            justify-content: space-between;
        }

        .justify-around\@#{$breakpoint} {
            justify-content: space-around;
        }

        .justify-evenly\@#{$breakpoint} {
            justify-content: space-evenly;
        }

        .justify-stretch\@#{$breakpoint} {
            justify-content: stretch;
        }

        .wrap\@#{$breakpoint} {
            flex-wrap: wrap;
        }

        .nowrap\@#{$breakpoint} {
            flex-wrap: nowrap;
        }

        .direction-column\@#{$breakpoint} {
            flex-direction: column;
        }

        .direction-column-reverse\@#{$breakpoint} {
            flex-direction: column-reverse;
        }

        .direction-row-reverse\@#{$breakpoint} {
            flex-direction: row-reverse;
        }

        /* display */
        .block\@#{$breakpoint} {
            display: block;
        }

        .inline\@#{$breakpoint} {
            display: inline;

            &-block\@#{$breakpoint} {
                display: inline-block;
            }
        }

        /* display & visibility */

        .none\@#{$breakpoint} {
            display: none;
        }

        .hidden\@#{$breakpoint} {
            visibility: hidden;
        }

        /* order */

        @for $i from 1 through 10 {
            .order-#{$i}\@#{$breakpoint} {
                order: $i
            }
        }

        /* text */
        .text-center\@#{$breakpoint} {
            text-align: center;
        }

        .text-left\@#{$breakpoint} {
            text-align: left;
        }

        .text-right\@#{$breakpoint} {
            text-align: right;
        }

        @for $i from 1 through 9 {
            .font-weight-#{$i}\@#{$breakpoint} {
                font-weight: #{$i}00;
            }
        }

        .italic\@#{$breakpoint} {
            font-style: italic;
        }

        .underline\@#{$breakpoint} {
            text-decoration: underline;
        }

        .capitalize\@#{$breakpoint} {
            text-transform: capitalize;
        }

        .uppercase\@#{$breakpoint} {
            text-transform: uppercase;
        }


        /* measures */

        @each $key, $value in $measures {

            @if $key == default {
                .measure\@#{$breakpoint} {
                    max-width: 100%;
                }
            }

            .measure-#{$key}\@#{$breakpoint} {
                max-width: $value;
            }

        }


        /*position*/

        .relative\@#{$breakpoint} {
            position: relative;
        }

        .fixed\@#{$breakpoint} {
            position: fixed;
        }

        .absolute\@#{$breakpoint} {
            position: absolute;
        }

        /* z-index */

        @for $i from 1 through 10 {
            .z-index-#{$i}\@#{$breakpoint} {
                z-index: $i;
            }
        }

        /* opacity */

        @for $i from 1 through 9 {
            .opacity-#{$i}\@#{$breakpoint} {
                opacity: calc($i / 10);
            }
        }

        /* object-fit */

        .object-fill\@#{$breakpoint} {
            object-fit: fill;
        }

        .object-contain\@#{$breakpoint} {
            object-fit: contain;
        }

        .object-cover\@#{$breakpoint} {
            object-fit: cover;
        }

        .object-none\@#{$breakpoint} {
            object-fit: none;
        }

        .object-scale\@#{$breakpoint} {
            object-fit: scale-down;
        }

        /*background-size*/

        .bg-cover\@#{$breakpoint} {
            background-size: cover;
        }

        .bg-contain\@#{$breakpoint} {
            background-size: contain;
        }

        /*radius*/

        @each $key, $value in $radius {

            @each $rp in $radius-positions {

                @if $rp == all {

                    @if $key == full {

                        .radius-#{$key}\@#{$breakpoint} {
                            border-radius: $value * 1%;
                        }

                    } @else if $key != full {

                        .radius-#{$key}\@#{$breakpoint} {
                            border-radius: $value + $units;
                        }

                    }

                }  @else if $rp != all {

                    @if $key == full {

                        .radius-#{$rp}-#{$key}\@#{$breakpoint} {
                            border-#{$rp}-radius: $value * 1%;
                        }

                    } @else if $key != full {

                        .radius-#{$rp}-#{$key}\@#{$breakpoint} {
                            border-#{$rp}-radius: $value + $units;
                        }

                    }
                }

            }


        }

        /* border */

        @each $border in $border-positions {

            /* border style */

            @each $bs in $border-styles {
                .#{$border}-#{$bs}\@#{$breakpoint} {
                    #{$border}-style: $bs;
                }
            }

            /* border width */

            @each $key, $value in $borders {
                .#{$border}-#{$key}\@#{$breakpoint} {
                    #{$border}-width: $value + $units;
                }
            }

            /* border-colors*/

            @each $key, $value in $colors {
                .#{$border}-#{"" + $key}\@#{$breakpoint} {
                    #{$border}-color: $value;
                }
            }

        }

        /*background & fonts colors*/

        @each $key, $value in $colors {
            .bg-#{"" + $key}\@#{$breakpoint} {
                background-color: $value;
            }

            .color-#{"" + $key}\@#{$breakpoint} {
                color: $value;
            }

        }

    }
}
